@{
    ViewData["Title"] = "Server Side Request Forgery (SSRF)";
}

<div class="text-center">
    <h1 class="display-4">@ViewData["Title"]</h1>
</div>

<div>
    <h2 class="display-8">Overview</h2>
    <p>
    In a Server-Side Request Forgery (SSRF) attack, the attacker can abuse functionality on the server to read or update internal resources.<br />
    The attacker can supply or modify a URL which the code running on the server will read or submit data to, and by carefully selecting the URLs,
    the attacker may be able to read server configuration such as AWS metadata, connect to internal services like http enabled databases or perform post requests towards internal services which are not intended to be exposed.    
    </p>

    <h2 class="display-8">Description</h2>
    <p>
       The target application may have functionality for importing data from a URL, publishing data to a URL or otherwise reading data from a URL that can be tampered with.<br />
       The attacker modifies the calls to this functionality by supplying a completely different URL or by manipulating how URLs are built (path traversal etc.).
    </p>
    <p>
        When the manipulated request goes to the server, the server-side code picks up the manipulated URL and tries to read data to the manipulated URL.<br />
        By selecting target URLs the attacker may be able to read data from services that are not directly exposed on the internet:
        <ul>
            <li>Cloud server meta-data - Cloud services such as AWS provide a REST interface on http://169.254.169.254/ where important configuration and sometimes even authentication keys can be extracted</li>
            <li>Database HTTP interfaces - NoSQL database such as MongoDB provide REST interfaces on HTTP ports. If the database is expected to only be available to internally, authentication may be disabled and the attacker can extract data</li>
            <li>Internal REST interfaces</li>
            <li>Files - The attacker may be able to read files using <file://> URIs</li>
        </ul>
        The attacker may also use this functionality to import untrusted data into code that expects to only read data from trusted sources, and as such circumvent input validation.
    </p>

    <h2 class="display-8">How to identify if you are vulnerable</h2>
    <p>
        <ul>
            <li>Untrusted input is not validated and is used to build a URI to request a resource from the server</li>
            <li>Untrusted input is directly used to build a URI for a request from the server to an internal resource</li>
        </ul>
    </p>

    <h2 class="display-8">How to protect yourself</h2>
    <p>
        <ul>
            <li>Only allow known-valid inputs</li>
            <li>Avoid using user input altogether</li>
            <li>Correctly setup firewalls and network accesses</li>
        </ul>
    </p>
</div>
<div class="d-flex justify-content-between">
    <div></div>
    <div>
        <a class="text-light btn btn-secondary" asp-area="" asp-controller="SSRF" asp-action="Exercise">Next: Exercise</a>
    </div>
</div>
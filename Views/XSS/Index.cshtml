@{
    ViewData["Title"] = "Cross Site Scripting (XSS)";
}

<div class="text-center">
    <h1 class="display-4">@ViewData["Title"]</h1>
</div>
<div>
    <h2 class="display-8">Overview</h2>
    <p>
        Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites.<br />
        XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user.<br />
        Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it.<br />
    </p>
    <p>
        An attacker can use XSS to send a malicious script to an unsuspecting user. The end user’s browser has no way to know that the script should not be trusted, and will execute the script.<br />
        Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other sensitive information retained by the browser and used with that site.<br />
        These scripts can even rewrite the content of the HTML page.
    </p>


    <h2 class="display-8">Description</h2>
    <p>
        Cross-Site Scripting (XSS) attacks occur when:<br />
        
        <ul>
            <li>Data enters a Web application through an untrusted source, most frequently a web request.</li>
            <li>The data is included in dynamic content that is sent to a web user without being validated for malicious content.</li>
        </ul>

    The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash, or any other type of code that the browser may execute.<br />
    The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data, like cookies or other session information, to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user’s machine under the guise of the vulnerable site.
    </p>

    <h2 class="display-8">How to identify if you are vulnerable</h2>
    <p>
        XSS flaws can be difficult to identify and remove from a web application.<br />
        The best way to find flaws is to perform a security review of the code and search for all places where input from an HTTP request could possibly make its way into the HTML output.<br />
        Note that a variety of different HTML tags can be used to transmit a malicious JavaScript.<br />
        Vulnerability Scanners such as Nessus, Nikto, and some other available tools can help scan a website for these flaws, but can only scratch the surface.<br />
        If one part of a website is vulnerable, there is a high likelihood that there are other problems as well.
    </p>

    <h2 class="display-8">How to protect yourself</h2>
    <p>
        
        The primary defenses against XSS are described in the <a class="text-dark" href="https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html">OWASP XSS Prevention Cheat Sheet</a>.

        Also, it’s crucial that you turn off HTTP TRACE support on all web servers.<br />
        An attacker can steal cookie data via Javascript even when document.cookie is disabled or not supported by the client.<br />
        This attack is mounted when a user posts a malicious script to a forum so when another user clicks the link, an asynchronous HTTP Trace call is triggered which collects the user’s cookie information from the server, and then sends it over to another malicious server that collects the cookie information so the attacker can mount a session hijack attack.<br />
        This is easily mitigated by removing support for HTTP TRACE on all web servers.
   </p> 
   <p>
        The OWASP ESAPI project has produced a set of reusable security components in several languages, including validation and escaping routines to prevent parameter tampering and the injection of XSS attacks.<br />
        In addition, the OWASP WebGoat Project training application has lessons on Cross-Site Scripting and data encoding.
   </p>
    
   <h2 class="display-8">Other types of XSS payloads</h2>
   <p>
        Depending on how an XSS lands on a page we may refer to them to as:
        <ul>
            <li><a class="text-dark" href="https://owasp.org/www-community/attacks/xss/">Reflected XSS</a>: the XSS payload is reflected on the response webpage as a result of a request.</li>
            <li><a class="text-dark" href="https://owasp.org/www-community/attacks/xss/">Stored XSS</a>: the XSS payload is retreived and innserted in the page from a store location (database, file, etc...).</li>
            <li><a class="text-dark" href="https://owasp.org/www-community/attacks/xss/">Blind XSS</a>: the XSS payload is triggered in a non visible or reachable page (such as log viewer, administrator consoles, etc...).</li>
            <li><a class="text-dark" href="https://owasp.org/www-community/attacks/DOM_Based_XSS">DOM Based XSS</a>: the XSS payload is inserted while the DOM is being constructed by a dynamic component (such as Javascript).</li>
        </ul>
   </p> 

    <h2 class="display-8">Other types of XSS payloads</h2>
    <p>
        Besides the typical XSS payloads, we may encounter less typical ones:
        <ul>
            <li>XSS via Attribute injections</li>
            <li>XSS via datatype injections</li>
        </ul>
   </p> 
   <p>
        The OWASP ESAPI project has produced a set of reusable security components in several languages, including validation and escaping routines to prevent parameter tampering and the injection of XSS attacks.<br />
        In addition, the OWASP WebGoat Project training application has lessons on Cross-Site Scripting and data encoding.
   </p>
</div>

<div class="d-flex justify-content-between">
    <div></div>
    <div>
        <a class="text-light btn btn-secondary" asp-area="" asp-controller="XSS" asp-action="Exercise">Next: Exercise</a>
    </div>
</div>